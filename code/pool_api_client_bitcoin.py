import requests,time,json,os,csv,time,pickle
import math
from datetime import datetime
import operator
import pandas as pd
from lxml import html

dateFormat="%Y-%m-%d"
dateFormatLog="%Y-%m-%d %H:%M:%S"
statsAPI='https://api.nicehash.com/api'

# The payments is a dictionary whose keys are the timestamps and the values are the amounts paid
def nicehash_stats(address):
	url=statsAPI+'?method=stats.provider&addr='+address
	stats=None
	payments={}
	balance=0
	totalPaid=0
	try:
		response=requests.get(url,verify=False)
	except Exception as e:
		print "[%s] ERROR nicehash_stats[%s]. Cannot make request. Exception %s"%(datetime.now().strftime(dateFormatLog),address,e)
		return None
	if response.status_code==200:
		# try:
			if 'stats' in response.json()['result']:
				stats=response.json()['result']['stats']
				if len(stats)>0:
					fd=open(outputDir+"/"+address+"_stats.json",'wb+')
					fd.write(response.text)
					fd.close
					for s in stats:
						balance+=float(s['balance'])
				else:
					print "[%s] WARNING nicehash_stats[%s]. No stats found. Reponse:%s"%(datetime.now().strftime(dateFormatLog),address,response.text.replace('\n',' '))
					balance='nan'
			else:
				print "[%s] ERROR nicehash_stats[%s]. No stats found. Reponse:%s"%(datetime.now().strftime(dateFormatLog),address,response.text.replace('\n',' '))
				return None
			if 'payments' in response.json()['result']:
				paymentData=response.json()['result']['payments']
				if len(paymentData)>0:
					for p in paymentData:
						amount=str(p["amount"])
						totalPaid+=float(amount)
						txid=p["TXID"]
						timestamp=datetime.strptime(p["time"],"%Y-%m-%d %H:%M:%S")
						payments[time.mktime(timestamp.timetuple())]=amount+"_"+txid
				else:
					if str(balance)=='nan':
						return None
					totalPaid='nan'
			return totalPaid,balance,payments
			#expired=stats['stats']['expired']
		# except Exception as e:
		# 	print "[%s] ERROR nicehash_stats[%s]. Exception %s. Response: %s"%(datetime.now().strftime(dateFormatLog),address,e,response.text.replace('\n',' '))
		# 	return None
	elif response.status_code==429:
		print "[%s] ERROR nicehash_stats[%s]. Received %s, too many responses. (%s)"%(datetime.now().strftime(dateFormatLog),address,response.status_code,response.text.replace('\n',' '))
		return "Rate","Limit"
	else:
		print "[%s] ERROR nicehash_stats[%s]. Received response: %s"%(datetime.now().strftime(dateFormatLog),address,response.status_code)
		return None
def get_currency(wallet,emails_monero=[],emails_btc=[]):
	if len(wallet)==0 or str(wallet)=='nan':
		return "NotWallet"
	if str(wallet).startswith('Sumoo'):
		return 'SUMOKOIN'
	elif str(wallet)[0]=='4' and len(str(wallet))>90:
		return 'MONERO'
	elif str(wallet)[0]=='2' and len(str(wallet))>=96:
		return 'BYTECOIN'
	elif str(wallet).startswith('etn'):
		return 'ELECTRONEUM'
	elif str(wallet).startswith('iz') and len(wallet)>=96:
		return 'INTENSECOIN'
	elif str(wallet).startswith('C') and len(wallet)==35:
		return 'CRYPTONITE'
	elif str(wallet).lower().startswith('wm') and not '@' in wallet:
		return 'AEON'
	elif str(wallet).startswith('0x') and len(str(wallet))>40:
		return 'ETHEREUM'
	elif str(wallet).startswith('TRT'):
		return 'TURTLECOIN'
	#elif (str(wallet).lower()[0]=='t' or str(wallet).lower()[0]=='z'):
	elif (str(wallet).lower()[0]=='t' or str(wallet).lower()[0]=='z') and len(wallet)>=35 and not '@' in str(wallet[:35]):
		return 'ZCASH'
	elif (str(wallet)[0]=='1' or str(wallet)[0]=='3') and len(wallet)>=26:
		return 'BITCOIN'
	elif '@' in str(wallet):
		#for pool in emails_monero:
		#	if str(wallet) in emails_monero[pool]:
		#		return 'MONERO'
		#for pool in emails_btc:
		#	if str(wallet) in emails_btc[pool]:
		#		return 'BITCOIN'
		return 'EMAIL'
	else:
		return 'OTHER'
if __name__ == "__main__" :
	outputDir='../data/infoWallets/bitcoin/nicehash%s/'%datetime.now().strftime(dateFormat)
	FILE_STATS=outputDir+'info_wallets_%s.csv'%datetime.now().strftime(dateFormat)
	if not os.path.exists(outputDir):
		os.makedirs(outputDir)
	addresses=[]
	filename_data_from_samples='../data/data_from_samples_miners.csv'
	data_from_samples=pd.read_csv(filename_data_from_samples,keep_default_na=False,na_values=['None','nan'])
	
	addresses=[]
	for w in list(data_from_samples['USER']):
		for wallet in str(w).split(','):
			if len(wallet)==0 or str(wallet)=='nan':
				continue
			if get_currency(wallet)=='BITCOIN':
				cleaned=wallet.split('.')[0].split('+')[0].split('/')[0].split(":")[0]
				if len(cleaned)>=26:
					addresses.append(cleaned)
	addresses=list(set(addresses))
	i=0
	while i<len(addresses):
		address=addresses[i]
		print "[%s] INFO  Quering info for [%s] in nicehash."%(datetime.now().strftime(dateFormatLog),address)
		stats=nicehash_stats(address)
		if stats:
			if len(stats)==2:
				time.sleep(5)
			else:
				totalPaid,balance,payments=stats
				fd=open(FILE_STATS,'ab+')
				fd.write("nicehash,%s,%s,%s,%s,%s\n"%(address,balance,totalPaid,len(payments),datetime.now().strftime(dateFormatLog)))
				fd.close()
				if len(payments)>0:
					pickle.dump(payments,open(outputDir+"/"+address+'_payments.pickle','wb+'))
				i+=1
		else:
			i+=1





			