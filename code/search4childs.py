
import sys, os, time, json, pickle, csv
import pandas as pd
import copy

PATH_REPORTS =  '../data/VirusTotal/reports'
PATH_LINKEDWALLETS = '../data/parents-linkedwallets-withoutpool.txt'
#OUTPUT = '../data/childs_of_samples_with_linkedwallets'


def read_hashes(hashes_path):
    if hashes_path.endswith('.txt'):
        hashes = []
        with open(hashes_path) as f:
            for line in f.readlines():
                hashes.append(str(line).strip())
        return hashes
    return json.load(open(hashes_path))

def get_childs_of_samples_with_linkedwallets(report_folder, samples_with_linkedwallets):
    childs = {}
    for report in os.listdir(report_folder):
        if report.endswith('report'):
            json_report = pickle.load(open(os.path.join(report_folder, report), "rb"))
            if 'sha256' in json_report:
                if 'additional_info' in json_report and 'compressed_parents' in json_report['additional_info']:
                    compressed_parents = json_report['additional_info']['compressed_parents']
                    for sample in compressed_parents:
                        if sample in samples_with_linkedwallets:
                            if sample not in childs:
                                childs[sample] = []
                            if json_report['sha256'] not in childs[sample]:
                                childs[sample].append(json_report['sha256'])
    return childs

def get_childs_of_samples(report_folder):
    childs = {}
    for report in os.listdir(report_folder):
        if report.endswith('report'):
            json_report = pickle.load(open(os.path.join(report_folder, report), "rb"))
            if 'sha256' in json_report:     

                if 'additional_info' in json_report: 
                    parents = []      

                    if 'compressed_parents' in json_report['additional_info']:
                        parents = json_report['additional_info']['compressed_parents']
                    if 'execution_parents' in json_report['additional_info']:
                        parents.extend(json_report['additional_info']['execution_parents'])

                    parents = list(set(parents))
                    for sample in parents:
                        if sample not in childs:
                            childs[sample] = []
                        if json_report['sha256'] not in childs[sample]:
                            childs[sample].append(json_report['sha256'])
    return childs


def get_brothers_of_samples_with_linkedwallets(report_folder, samples_with_linkedwallets):
    brothers = {}
    childs_of_samples_with_linkedwallets = {}
    for sample in samples_with_linkedwallets:
        filename = os.path.join(report_folder, sample + '.report')
        if os.path.exists(filename):
            json_report = pickle.load(open(filename, "rb"))
            if 'additional_info' in json_report and 'compressed_parents' in json_report['additional_info']:
                compressed_parents = json_report['additional_info']['compressed_parents']
                for parent in compressed_parents: 
                    if parent not in childs_of_samples_with_linkedwallets:
                        childs_of_samples_with_linkedwallets[parent] = []
                    childs_of_samples_with_linkedwallets[parent].append(sample)

    for report in os.listdir(report_folder):
        if report.endswith('report'):
            json_report = pickle.load(open(os.path.join(report_folder, report), "rb"))
            if 'sha256' in json_report:
                if 'additional_info' in json_report and 'compressed_parents' in json_report['additional_info']:
                    compressed_parents = json_report['additional_info']['compressed_parents']
                    for parent in compressed_parents:
                        # ---- looking for common parents
                        if parent in childs_of_samples_with_linkedwallets: 
                            # ---- brothers: adding descendents of a common ancestor
                            childs_of_samples_with_linkedwallets[parent].append(json_report['sha256'])

    for sample in samples_with_linkedwallets:
        for parent in childs_of_samples_with_linkedwallets:
            if sample in childs_of_samples_with_linkedwallets[parent]:
                brothers[sample] = copy.copy(childs_of_samples_with_linkedwallets[parent])
                brothers[sample].remove(sample)

    return brothers


def look_for_childs_with_wallets():
    samples_with_wallets = read_hashes(PATH_LINKEDWALLETS)
    childs_of_samples_with_linkedwallets = get_childs_of_samples_with_linkedwallets(PATH_REPORTS, samples_with_wallets)
    pickle.dump(childs_of_samples_with_linkedwallets, open(OUTPUT + '.pickle', 'wb'))
    df = pd.DataFrame.from_dict(childs_of_samples_with_linkedwallets, orient="index")
    df.to_csv(OUTPUT + '.csv')


def look_for_childs():
    OUTPUT = '../data/childs_of_samples'
    childs_of_samples = get_childs_of_samples(PATH_REPORTS)
    pickle.dump(childs_of_samples, open(OUTPUT + '.pickle', 'wb'))
    df = pd.DataFrame.from_dict(childs_of_samples, orient="index")
    df.to_csv(OUTPUT + '.csv')


def look_for_brothers():
    outputbasename = OUTPUT.replace('childs', 'brothers')
    samples_with_wallets = read_hashes(PATH_LINKEDWALLETS)
    brothers_of_samples_with_linkedwallets = get_brothers_of_samples_with_linkedwallets(PATH_REPORTS, samples_with_wallets)
    pickle.dump(brothers_of_samples_with_linkedwallets, open(outputbasename + '.pickle', 'wb'))
    df = pd.DataFrame.from_dict(brothers_of_samples_with_linkedwallets, orient="index")
    df.to_csv(outputbasename + '.csv')



if __name__ == "__main__" :  

    #look_for_childs_with_wallets
    look_for_childs()
    #look_for_brothers()
