import sys
from datetime import datetime
import math
import re
import os
import pickle
import urlparse
import pandas as pd
from subprocess import call,check_output
import json

'''
 Note we don't share the raw data. 
 To create the data, see virustTotalAnalyzer.py, malwareCrawler.py and HybridAnalysis/queryManager.py.
 If you don't want to use your own data, see data/miners_dataset.csv for the processed file on ours
'''
pcap_dir='PATH/TO/YOUR/FILES'
behaviour_dir='PATH/TO/YOUR/FILES'
reports_dir='PATH/TO/YOUR/FILES'
paloAlto_file='PATH/TO/YOUR/FILES'
hybrid_analysis_dir='PATH/TO/YOUR/FILES'
binaries_dir_vt='PATH/TO/YOUR/FILES'
binaries_dir_vs='PATH/TO/YOUR/FILES'


timeformat="%Y-%m-%d_%H:%M:%S"
samples={}


OUTPUT_FILE_RAW='../data/data_from_samples_minersNEW.pickle'
OUTPUT_FILE_CSV='../data/data_from_samples_minersNEW.csv'



shortest_run = 4
knownPools=[
#'hashfor.cash',
'cryptoescrow',
'cryptonotepool',
'minergate',
#'hash-to-coins',
#'kippo',
'litecoinpool',
'moneropool',
'fairpool',
'crypto-pool',
'monero.farm',
'monerohash',
'monerominers',
'extremepool',
'poolto',
'minexmr',
'supportxmr',
#'pool-proxy',
'hashvault',
'minemonero',
'xmrpool',
'webcoin',
#'xcnpool2',
'miner.center',
'nanopool',
'dwarfpool',
'hashinvest',
'prohash',
'zpool',
#'mineshaft.ml',
'ppxxmr',
'viaxmr',
'c1d2',
'moneroocean',
'cryptopool',
'minercircle',
'f2pool',
'bohemianpool',
'suprnova'
]

knownPoolsBitcoin={
'antpool',
'bcmonster',
'mining.bitcoinaffiliatenetwork',
'bitminter',
'50btc',
'pool.btc',
'pool.btcc',
'btcdig',
'btcmp',
'btczpool',
'bw/poo',
'eligius',
'ghash',
'give-me-coins',
'goldennoncepool',
'bravo-mining',
'kano',
'kmdpool',
'mmpool',
'mergemining',
'multipool',
'slushpool',
'zenpool'
}
def getStrings(filename):
    data = open(filename).read()
    return check_output(['strings',filename]).split('\n')

def knownPool(domain):
    for p in knownPools:
        if p in domain.lower():
            return True
def getPoolName(pool):
    for poolName in knownPools:
        if poolName in pool.lower():
            return poolName
    return pool            
def knownPoolBTC(domain):
    for p in knownPoolsBitcoin:
        if p in domain.lower():
            return True
def getPoolNameBTC(pool):
    for poolName in knownPoolsBitcoin:
        if poolName in pool.lower():
            return poolName
    return pool     

def initializeData():
    global samples
    samples={}
    if os.path.exists(OUTPUT_FILE_RAW):
        samples=pickle.load(open(OUTPUT_FILE_RAW))
    print len(samples)

def dumpData():
    global samples
    pickle.dump(samples,open(OUTPUT_FILE_RAW,'wb'))

def writeCSV(printScreen=False,outfile=None):
    global samples
    if not printScreen: 
        if outfile is None:
            fd=open(OUTPUT_FILE_CSV,'wb')
        else:
            fd=open(outfile,'wb')
        fd.write("SHA256,POOL,URLPOOL,USER,PASS,NTHREADS,AGENT,DSTIP,DSTPORT,DNSRR,SOURCE\n")
    for sha256 in samples:
        try:
            pool=samples[sha256]['pool'].encode('utf-8').replace('"','\'')
        except:
            pool=None
        try:
            minedPool=samples[sha256]['minedPool'].encode('utf-8').replace('"','\'')
        except:
            minedPool=None            
        try:
            user=samples[sha256]['user'].encode('utf-8').replace('"','\'')
        except:
            user=None
        try:
            password=samples[sha256]['password'].encode('utf-8').replace('"','\'')
        except:
            password=None
        try:
            agent=samples[sha256]['agent'].encode('utf-8').replace('"','\'')
        except:
            agent=None
        try:
            numThreads=samples[sha256]['numThreads'].encode('utf-8').replace('"','\'')
        except:
            numThreads=None
        try:
            dstIP=samples[sha256]['dstIP'].encode('utf-8').replace('"','\'')
        except:
            dstIP=None
        try:
            dstPort=samples[sha256]['dstPort'].encode('utf-8').replace('"','\'')
        except:
            dstPort=None
        dns=""
        try:
            domains=samples[sha256]['dns']
        except:
            domains=None
        if domains:
            for d in domains[:-1]:
                dns+="[%s]-"%d
            dns+="[%s]"%domains[-1].replace('"','\'')
        source=samples[sha256]['source']
        if all((v is None or str(v).lower()=='nan') for v in [pool,user,password,numThreads,agent,dstIP,dstPort]) and len(dns)==0:
            continue
        if printScreen:
            try:
                print '"{}","{}","{}","{}","{}","{}","{}","{}","{}","{}","{}"'.format(sha256,pool,minedPool,user,password,numThreads,agent,dstIP,dstPort,dns,source.replace("BINARY-","BINARY_"))
            except Exception as e:
                print "[%s] ERROR. Sha256=%s. %s"%(datetime.now().strftime(timeformat),sha256,e)
                pass
        else:
            try:
                fd.write('"{}","{}","{}","{}","{}","{}","{}","{}","{}","{}","{}"\n'.format(sha256,pool,minedPool,user,password,numThreads,agent,dstIP,dstPort,dns,source.replace("BINARY-","BINARY_")))
            except Exception as e:
                print "[%s] ERROR. Sha256=%s. %s"%(datetime.now().strftime(timeformat),sha256,e)
                pass
    if not printScreen: fd.close()

# Merge two data files, assuming the file2 is the most current one but misses data from file1
def mergeDataFiles(file1,file2,outfile):
    if not os.path.exists(file1+'.csv'):
        print "ERROR: CSV file %s not found"%file1
        exit()
    if not os.path.exists(file2+'.csv'):
        print "ERROR: CSV file %s not found"%file2
        exit()
    samples1PICKLE=pickle.load(open(file1+'.pickle'))
    print "READ %s.pickle"%file1

    samples1CSV=pd.read_csv(file1+'.csv',keep_default_na=False,na_values=['None','nan'])
    samples1SHA=list(samples1CSV['SHA256'])
    print "READ %s.csv"%file1

    allSamples=pickle.load(open(file2+'.pickle'))
    print "READ %s.pickle"%file2

    samples2CSV=pd.read_csv(file2+'.csv',keep_default_na=False,na_values=['None','nan'])
    samples2SHA=list(samples2CSV['SHA256'])
    print "READ %s.csv"%file2

    for f in samples1SHA:
        if not f in samples2SHA:            
            try:
                allSamples[f]=samples1PICKLE[f]
                print "ADDING NEW SAMPLE FROM %s in %s: %s"%(file1,file2,f)
            except KeyError as k:
                print "KEY ERROR: FROM %s in %s: %s"%(file1,file2,f)

    pickle.dump(allSamples,open(outfile+".pickle",'wb'))
    writeCSV(outfile=outfile+".csv")

# Add a new piece of data to the global dict
def addData(sha256,pool=None,user=None,password=None,agent=None,dstIP=None,dstPort=None,numThreads=None,dns='',minedPool=None,source=None):
    global samples
    if not sha256 in samples:
        samples[sha256]={}
    if pool and not 'pool' in samples[sha256]:
        samples[sha256]['pool']=pool.strip()
    elif pool and not pool.strip() in samples[sha256]['pool'].split(','):
        print "[%s] WARNING. Sha256=%s. Different pools found for same sample (%s vs %s)"%(datetime.now().strftime(timeformat),sha256,pool,samples[sha256]['pool'])
        samples[sha256]['pool']+=',%s'%pool.strip()
    if minedPool and not 'minedPool' in samples[sha256]:
        samples[sha256]['minedPool']=minedPool.strip()  
    elif minedPool and not minedPool.strip() in samples[sha256]['minedPool'].split(','):
        samples[sha256]['minedPool']+=',%s'%minedPool.strip()      
    if user and not 'user' in samples[sha256]:
        samples[sha256]['user']=user
    elif user and not user in samples[sha256]['user'].split(','):
        print "[%s] WARNING. Sha256=%s. Different users found for same sample (%s vs %s)"%(datetime.now().strftime(timeformat),sha256,user,samples[sha256]['user'])
        samples[sha256]['user']+=',%s'%user
    if password and not 'password' in samples[sha256]:
        samples[sha256]['password']=password
    elif password and not password in samples[sha256]['password'].split(','):
        print "[%s] WARNING. Sha256=%s. Different passwords found for same sample (%s vs %s)"%(datetime.now().strftime(timeformat),sha256,password,samples[sha256]['password'])             
        samples[sha256]['password']+=',%s'%password
    if agent and not 'agent' in samples[sha256]:
        samples[sha256]['agent']=agent
    elif agent and not agent in samples[sha256]['agent'].split(','):
        print "[%s] WARNING. Sha256=%s. Different agents found for same sample (%s vs %s)"%(datetime.now().strftime(timeformat),sha256,agent,samples[sha256]['agent'])
        samples[sha256]['agent']+=',%s'%agent

    if dstIP and not 'dstIP' in samples[sha256]:
        samples[sha256]['dstIP']=dstIP
    elif dstIP and not dstIP in samples[sha256]['dstIP'].split(','):
        print "[%s] WARNING. Sha256=%s. Different dstIPs found for same sample (%s vs %s)"%(datetime.now().strftime(timeformat),sha256,dstIP,samples[sha256]['dstIP'])           
        samples[sha256]['dstIP']+=',%s'%dstIP

    if numThreads and not 'numThreads' in samples[sha256]:
        samples[sha256]['numThreads']=numThreads
    elif numThreads and not str(numThreads) in samples[sha256]['numThreads'].split(','):
        print "[%s] WARNING. Sha256=%s. Different numThreads found for same sample (%s vs %s)"%(datetime.now().strftime(timeformat),sha256,numThreads,samples[sha256]['numThreads'])     
        samples[sha256]['numThreads']+=',%s'%numThreads

    if dstPort and not 'dstPort' in samples[sha256]:
        samples[sha256]['dstPort']=dstPort
    elif dstPort and not dstPort in samples[sha256]['dstPort'].split(','):
        print "[%s] WARNING. Sha256=%s. Different dstPorts found for same sample (%s vs %s)"%(datetime.now().strftime(timeformat),sha256,dstPort,samples[sha256]['dstPort'])  
        samples[sha256]['dstPort']+=',%s'%dstPort

    if dns:
        if not 'dns' in samples[sha256]:
            dns_temp=[]
        else:
            dns_temp=samples[sha256]['dns']
        for d in dns.split("]-["):
            domain=d.replace('[','').replace(']','')
            if not domain in dns_temp:
                dns_temp.append(domain)
        samples[sha256]['dns']=dns_temp

    if not 'source' in samples[sha256]:
       samples[sha256]['source']=source.replace("-","_")
    else:
        samples[sha256]['source']+="-%s"%source.replace("-","_")
    #if  not all(v is None for v in [pool,user,password,numThreads,agent,dstIP,dstPort]) or len(dns)>0:
    #    print '"%s","%s","%s","%s","%s","%s","%s","%s","%s","%s"'%(sha256,pool,user,password,numThreads,agent,dstIP,dstPort,dns,source)

# Extract information from a pcap file
def get_data_PCAP(filename):
    pool=None
    minedPool=None
    dns=''
    found=False
    validJson=False
    domains=[]
    sha256=os.path.basename(filename).split('.')[0]
    if previous is not None and sha256 in list(previous['SHA256']) and "NETWORK" in previous.loc[previous['SHA256']==sha256]['SOURCE']:
        print "[%s] INFO. PCAP File already processed: %s"%(datetime.now().strftime(timeformat),filename)
        return
    #print "[%s] INFO. Processing %s"%(datetime.now().strftime(timeformat),filename)
    try:
        packets=rdpcap(filename)
    except Exception as e:
        print "[%s] ERROR. Reading PCAP File: %s. %s"%(datetime.now().strftime(timeformat),filename,e)
        return
    for packet in packets:
        if packet.haslayer(DNSQR):
            qDomain=packet[DNSQR].qname[:-1]
            if knownPool(qDomain):
                pool=getPoolName(qDomain)
                minedPool=qDomain
            if not qDomain in domains and not 'time.windows' in qDomain:
                domains.append(qDomain)
    if len(domains)>0:
        for d in domains[:-1]:
            dns+="[%s]-"%d
        dns+="[%s]"%domains[-1]
    else:
        dns=''       
    for packet in packets:
        try:
            if TCP in packet:
                l=str(packet[TCP].payload)
                if 'login' in l and 'params' in l:
                    try:
                        jResponse=json.loads(l[l.find('{'):])
                        dstIP=str(packet[IP].dst)
                        dstPort=str(packet[TCP].dport)
                        validJson=True
                    except:
                        continue
                    try:
                        user=jResponse['params']['login']
                    except:
                        user=None
                    try:
                        password=jResponse['params']['pass']
                    except:
                        password=None
                    try:
                        agent=jResponse['params']['agent']
                    except:
                        agent=None

                    addData(sha256,pool=pool,user=user,password=password,agent=agent,dstIP=dstIP,dstPort=dstPort,dns=dns,minedPool=minedPool,source='NETWORK')
                    #print "%s,%s,%s,%s,%s,%s,%s,%s"%(,pool,user,password,agent,dstIP,dstPort,dns)
                # ZCASH
                elif "mining.authorize" in l:
                    try:
                        jResponse=json.loads(l[l.find('{'):])
                        dstIP=str(packet[IP].dst)
                        dstPort=str(packet[TCP].dport) 
                        validJson=True
                    except:
                        continue;
                    try: 
                        user=jResponse['params'][0]
                    except:
                        user=None
                    try: 
                        password=jResponse['params'][1]
                    except:
                        password=None                
                    addData(sha256,pool=pool,user=user,password=password,dstIP=dstIP,dstPort=dstPort,dns=dns,minedPool=minedPool,source='NETWORK')
        except Exception as e:
            print "[%s] ERROR. Reading a packet from %s. %s"%(datetime.now().strftime(timeformat),filename,e)


                #print "%s,%s,%s,%s,%s,%s,%s"%(os.path.basename(filename).split('.')[0],pool,user,password,dstIP,dstPort,dns)
    if not validJson and len(dns)>1:
        addData(sha256,pool=pool,dns=dns,source='NETWORK')

def get_data_behaviour(lines,sha256,isBinary=False):
    user=None
    dstPort=None
    numThreads=None
    minedPool=None
    poolName=None
    password=None
    agent=None
    debug=False
    usesConfig=False
    regexpXMRWallet=re.compile('( 4([0-9]|[A-B]).{93})')
    for i,v in enumerate(lines):
        if ('-o' in str(v) or '--url=' in str(v)) and (' -u' in str(v) or ' --user=' in str(v) or ' -O' in str(v) or ' --userpass=' in str(v)):
            # XMRig
            if ' -c ' in str(v) or ' --config=' in str(v):
                usesConfig=True
            try:
                if '-o' in str(v):
                    pool=v.split('-o')[1].split()[0].replace('\\"', '"').replace('"', '')
                else:
                    pool=v.split('--url=')[1].split()[0].replace('\\"', '"').replace('"', '')
                try:
                    parsed=urlparse.urlparse(pool)
                    if parsed.netloc:
                        hostPort=parsed.netloc
                    else:
                        hostPort=parsed.path
                    poolName=hostPort.split(":")[0]
                    try:
                        dstPort=hostPort.split(":")[1]
                    except:
                        dstPort=None
                   
                except Exception as e:
                    print "[%s] WARNING sha256=%s. Found pool with invalid URL %s"%(datetime.now().strftime(timeformat),sha256,pool)
                    poolName=pool
                    dstPort=None
            except:
                pool=None
                dstPort=None
            try:
                if ' -u ' in str(v):
                    newUser=v.split(' -u')[1].split()[0].replace('\\"', '"').replace('"', '')
                elif ' --user=' in str(v):
                    newUser=v.split(' --user=')[1].split()[0].replace('\\"', '"').replace('"', '')
                elif ' -O' in str(v):
                    listUserPass=v.split(' -O')[1].split()[0].split(":")
                    newUser=listUserPass[0].replace('\\"', '"').replace('"', '')
                    password=listUserPass[1].replace('\\"', '"').replace('"', '')
                elif ' --userpass=' in str(v):
                    listUserPass=v.split(' --userpass=')[1].split()[0].split(":")
                    newUser=listUserPass[0].replace('\\"', '"').replace('"', '')
                    password=listUserPass[1].replace('\\"', '"').replace('"', '')
                if user and not newUser in user.split(','):
                    print "[%s] WARNING. File %s. Found various wallets (%s, %s)"%(datetime.now().strftime(timeformat),sha256,newUser,user)
                    user+=","+newUser
                else:
                    user=newUser
            except Exception as e:
                # print e
                pass
            try:
                password=v.split(' -x ')[1].split()[0].replace('\\"', '"').replace('"', '')
            except:
                password=None
            try: 
                numThreads=v.split(' -t ')[1].split()[0].replace('\\"', '"').replace('"', '')
                if "-" in numThreads:
                    numThreads=None
            except:
                numThreads=None
            try:
                agent=v.split(' --user-agent=')[1].split()[0].replace('\\"', '"').replace('"', '')
            except:
                agent=None
            if poolName is not None and ('%' in poolName or '$' in poolName or "]" in poolName or "[" in poolName or len(poolName.strip()) < 5):
                poolName =None
            if user and len(user.strip()) < 5:
                user =None
            if user is not None and '%' in user:
                user=None
        elif ' -M ' in str(v):
            # Yet Another Miner (YAM)
            #https://github.com/onzeway/blockchain_miner_docker
            #http://www.kpematop.com/mining/readme.txt
            yamurl=v.split(' -M ')[1].split()[0].replace('\\"', '"').replace('"', '')
            try:
                user=yamurl.split('//')[1].split(':')[0]
                password=yamurl.split('//')[1].split(':')[1].split('@')[0]
                poolName=yamurl.split('@')[1].split(':')[0]
                dstPort=",".join([dst.split('/')[0] for dst in yamurl.split('@')[1].split(':')[1:]])
            except:
                print "[%s] WARNING. File %s. Could not decode YAM URL (%s)"%(datetime.now().strftime(timeformat),sha256,yamurl) 
            try:
                numThreads=v.split(' -t ')[1].split()[0].replace('\\"', '"').replace('"', '').replace(',','').strip()
            except:
                numThreads=None
        elif not isBinary and (' -c ' in str(v) or ' --config=' in str(v)):
            usesConfig=True

        elif 'login' in v and 'params' in v:
            # Network JSON-RPC
            try:
                jResponse=json.loads(v[v.find('{'):])
                validJson=True
            except:
                continue
            try:
                newUser=jResponse['params']['login']
                if newUser=='%s':
                    continue
                if user and not newUser in user.split(","):
                    #print "[%s] WARNING. File %s. Found 2 wallets (%s, %s)"%(datetime.now().strftime(timeformat),sha256,newUser,user)
                    user+=","+newUser
                else:
                    user=newUser
            except:
                user=None
            try:
                password=jResponse['params']['pass']
                if password=='%s':
                    continue
            except:
                password=None
            try:
                agent=jResponse['params']['agent']
                if agent=='%s':
                    continue
            except:
                agent=None
        elif isBinary:
            # If the lines being processed come from the strings of a binary, then look for monero wallets using regexp
            a=regexpXMRWallet.findall(v)
            if a is not None:
                for item in a:
                    if type(item)==tuple:
                        for t in item:
                            if not '@' in str(t) and len(str(t))>90 and str(t)[0]=='4':
                                user=t
                                break
                    else:
                        if not '@' in str(item) and len(str(item))>90 and str(item)[0]=='4':
                            user=item
                            break
            if knownPool(v):
                minedPool=v
                poolName=getPoolName(v)
    # If from a binary we only get the poolName, then discard            
    if isBinary and poolName is not None and all(v is None for v in [user,dstPort,password,numThreads,agent]):
        poolName=None
    # If the user was not obtained but there is evidence of using a configuration file, then the user is USES-CONFIG-FILE
    if not user and usesConfig:
        user='USES-CONFIG-FILE'          
    return poolName,user,dstPort,password,numThreads,agent,minedPool

def extractFromBinaries(source):
    if (source=='VIRUSTOTAL'):
        files=os.listdir(binaries_dir_vt)
        binaries_dir = binaries_dir_vt
    elif (source=='VIRUSSHARE'):
        files=os.listdir(binaries_dir_vs)
        binaries_dir = binaries_dir_vs

    #print "SHA256,POOL,USER,PASSWORD"
    for filename in files:
        sha256=filename.split('.')[0]
        data=getStrings(binaries_dir+filename)
        poolName,user,dstPort,password,numThreads,agent,minedPool=get_data_behaviour(data,sha256,isBinary=True)
        if (source=='VIRUSTOTAL'):
            addData(sha256,pool=poolName,user=user,dstPort=dstPort,password=password,numThreads=numThreads,minedPool=minedPool,source='BINARY_VT')
        elif (source=='VIRUSSHARE'):
            addData(sha256,pool=poolName,user=user,dstPort=dstPort,password=password,numThreads=numThreads,minedPool=minedPool,source='BINARY_VS')

def extractFromNetwork():
    files=os.listdir(pcap_dir)
    #print "SHA256,POOL,USER,PASS,SRCIP,SRCPORT,DNSRR"        
    for filename in files:
        get_data_PCAP(pcap_dir+filename)

def extractFromReport():
    minedPool=None
    files=os.listdir(reports_dir)
    for filename in files:
        dns=''
        sha256=filename.split('.')[0]
        data = pickle.load(open(reports_dir+filename))
        if data['response_code']==0:
            continue
        if 'additional_info' in data:
            if 'network' in data['additional_info']:
                if 'dns' in data['additional_info']['network']:
                    domains=data['additional_info']['network']['dns']
                    for d in domains[:-1]:
                        dns+="[%s]-"%d['hostname']
                        if knownPool(d['hostname']):
                            minedPool=d['hostname']
                            poolName=getPoolName(d['hostname'])
        try:
            lines=json.dumps(data,sort_keys=True,indent=4, separators=(',', ': ')).split('\n')
        except Exception as e:
            print "[%s] WARNING sha256=%s. Cannot parse json data (%s)"%(filename,e)
            return 
        poolName,user,dstPort,password,numThreads,agent,minedPool=get_data_behaviour(lines,sha256)
        #print '%s,"%s","%s","%s"'%(sha256,pool,user,password)
        addData(sha256,pool=poolName,user=user,dstPort=dstPort,password=password,numThreads=numThreads,dns=dns,minedPool=minedPool,source='REPORT')

def extractFromBehaviour():
    files=os.listdir(behaviour_dir)
    #print "SHA256,POOL,USER,PASSWORD"
    for filename in files:
        sha256=filename.split('.')[0]
        data=pickle.load(open(behaviour_dir+filename))
        try:
            lines=json.dumps(data,sort_keys=True,indent=4, separators=(',', ': ')).split('\n')
        except Exception as e:
            print "[%s] WARNING sha256=%s. Cannot parse json data (%s)"%(filename,e)
            return
        poolName,user,dstPort,password,numThreads,agent,minedPool=get_data_behaviour(data,sha256)
        addData(sha256,pool=poolName,user=user,dstPort=dstPort,password=password,numThreads=numThreads,minedPool=minedPool,source='BEHAVIOUR')


def extractFromPaloAlto():
    #SHA256,First Seen,Currency,Pool,Algorithm,User
    df_palo = pd.read_csv(paloAlto_file,keep_default_na=False,na_values=['nan','NaN','N/A',''])
    for index, row in df_palo.iterrows(): 
        sha256 = row['SHA256']
        user = str(row['User'])
        pool = str(row['Pool'])
        parsed=urlparse.urlparse(pool.replace("'",'')) 
        if parsed.netloc:
            hostPort=parsed.netloc
        else:
            hostPort=parsed.path
        poolName=hostPort.split(":")[0]
        try:
            dstPort=hostPort.split(":")[1]
        except:
            dstPort=None
        minedPool=poolName
        poolName=getPoolName(poolName)
        addData(sha256,user=user,pool=poolName,dstPort=dstPort,minedPool=minedPool,source='PALOALTO')

def extractFromHybridAnalysis():
    poolName=None
    minedPool=None
    for root,subdirs,files in os.walk(hybrid_analysis_dir):
        for filename in files:
            sha256=filename.split('.')[0]
            lines=open(hybrid_analysis_dir+filename).readlines()
            for l in lines:
                if not poolName and knownPool(l):
                    poolName=getPoolName(l) 
                    minedPool=l
            validJson=False             
            poolName_out,user,dstPort,password,numThreads,agent,minedPool_out=get_data_behaviour(lines,sha256)
            if minedPool_out is not None:
                minedPool=minedPool_out
            if poolName_out is not None:
                poolName = poolName_out
            addData(sha256,pool=poolName,user=user,dstPort=dstPort,password=password,numThreads=numThreads,minedPool=minedPool,source='HYBRID_ANALYSIS')

# chars = r"A-Za-z0-9/\-:.,_$%'()[\]<> "
# regexp = '[%s]{%d,}' % (chars, shortest_run)
# pattern = re.compile(regexp)
if __name__ == "__main__" :
    from scapy.all import *

    # initializeData()
    # writeCSV()
    # exit()
    # mergeDataFiles('../data/data_from_samples_minersV11','../data/data_from_samples_minersV12','../data/data_from_samples_miners_merged')
    # exit()

    previous=None #pd.read_csv(OUTPUT_FILE_CSV,keep_default_na=False,na_values=['None','nan'])
    print "[%s] INFO. Initializing data"%(datetime.now().strftime(timeformat))
    initializeData()
    print "[%s] INFO. Writing CSV"%(datetime.now().strftime(timeformat))
    writeCSV(printScreen=False)
    exit()
    print "[%s] INFO. Extracting from network"%(datetime.now().strftime(timeformat))
    extractFromNetwork() 
    print "[%s] INFO. Dumping pickle"%(datetime.now().strftime(timeformat))
    dumpData()
    print "[%s] INFO. Extracting from behaviour"%(datetime.now().strftime(timeformat))
    extractFromBehaviour() 
    print "[%s] INFO. Dumping pickle"%(datetime.now().strftime(timeformat))
    dumpData()       
    print "[%s] INFO. Extracting from reports"%(datetime.now().strftime(timeformat))
    extractFromReport() 
    print "[%s] INFO. Dumping pickle"%(datetime.now().strftime(timeformat))
    dumpData()
    print "[%s] INFO. Extracting from paloAlto"%(datetime.now().strftime(timeformat))
    extractFromPaloAlto() 
    print "[%s] INFO. Dumping pickle"%(datetime.now().strftime(timeformat))
    dumpData()
    print "[%s] INFO. Extracting from HybridAnalysis"%(datetime.now().strftime(timeformat))
    extractFromHybridAnalysis()
    print "[%s] INFO. Extracting from VirusShare"%(datetime.now().strftime(timeformat))
    extractFromBinaries('VIRUSSHARE')
    print "[%s] INFO. Dumping pickle"%(datetime.now().strftime(timeformat))
    dumpData() 

    extractFromBinaries('VIRUSTOTAL')
    print "[%s] INFO. Dumping pickle"%(datetime.now().strftime(timeformat))
    dumpData() 

    # ----------------------- 
    pcap_dir='../data/VirusTotal/network-hybrid/'
    print "[%s] INFO. Extracting from network"%(datetime.now().strftime(timeformat))
    extractFromNetwork() 
    print "[%s] INFO. Dumping pickle"%(datetime.now().strftime(timeformat))
    dumpData() 

    print "[%s] INFO. Writing CSV"%(datetime.now().strftime(timeformat))
    writeCSV(printScreen=False)
