

import json
import sys
from shutil import copyfile
from datetime import datetime,timedelta
import requests,pickle
from io import BytesIO,StringIO
import gzip
import zipfile
import time
import os
import json
import shutil
import pandas as pd

# You'll need the API from HybridAnalysis: https://github.com/PayloadSecurity/VxAPI
import vxapi


HYBRID_ANALYSIS_API_KEY='YOUR_HybridAnalysis_API_KEY'
ROOT_DIR='../..'
knownPools=[
'hashfor.cash',
'cryptoescrow',
'cryptonotepool',
'minergate',
'hash-to-coins',
'kippo',
'litecoinpool',
'moneropool',
'fairpool',
'crypto-pool',
'monero.farm',
'monerohash',
'monerominers',
'extremepool',
'poolto',
'minexmr',
'supportxmr',
'pool-proxy',
'hashvault',
'xmrpool',
'webcoin',
'xcnpool2',
'miner.center',
'nanopool',
'dwarfpool',
'hashinvest',
'prohash',
'zpool',
'mineshaft.ml',
'ppxxmr',
'viaxmr',
'c1d2'
]
domains_smominru=[
'down.oo000oo.club',
'www.cyg2016.xyz',
'down.mys2016.info',
'wmi.mykings.top.info',
'wmi.oo000oo.club',
'xmr.5b6b7b.ru',
'64.myxmr.pw',
'wmi.my0709.xyz',
'ftp.ruisgood.ru',
'ftp.oo000oo.me',
'ftp.ftp0118.info',
'js.mys2016.info',
'down.my0709.xyz',
'down.my0115.ru',
'wmi.my0115.ru',
'js.my0115.ru',
'Xmr.xmr5b.ru',
'64.mymyxmra.ru',
'Down.down0116.info']
domains_photominer_campaign=[
'stafftest.ru',
'hrtests.ru',
'profetest.ru',
'testpsy.ru',
'pstests.ru',
'qptest.ru',
'prtests.ru',
'jobtests.ru',
'iqtesti.ru',
'managtest.ru',
'testswork.ru',
'www.testtrade.ru',
'www.tradetests.ru',
'worktests.ru']

domains_xbooster_botnet_all=[
'uy.ziten.ru.ovh.net',
'ztracker.ml.ovh.net',
'ztracker.ml',
'ztracker.gq',
'wirtok.com',
'ytracker.cf',
'xtracker.club.ovh.net',
'ztracker.xyz',
'uy.ziten.ru',
'ztracker.online',
'xtracker.club',
'qtracker.tk',
'ytracker.tk',
'osdsoft.com',
'ztracker.club'
]
domains_adylkuzz=[
'super5566.com',
'08.super5566.com',
'a1.super5566.com',
'aa1.super5566.com',
'07.super5566.com',
'super1024.com',
'lll.super1024.com',
'am.super1024.com',
'microsoftcloudserver.com',
'disgogoweb.com',
'minecoins18.com',
'ssr.la'
]
domains_jenkins=[
'btc.poolbt.com',
'shell.poolbt.com',
'xmr.btgirl.com.cn',
'btc.btgirl.com.cn']

domains_virut_botnet=[
'camaltirestorant.com',
'ant.trenz.pl',
'ilo.brenz.pl'
]
domains_ramnit_botnet=[
'fget-career.com',
'rtvwerjyuver.com',
'supnewdmn.com',
'tvrstrynyvwstrtve.com',
'wqerveybrstyhcerveantbe.com'
]
domains_nitol_botnet=[
'zwx5060.3322.org',
'guangkuo119.3322.org',
'yezi999.3322.org',
'kankan902.3322.org',
'maple110.3322.org',
'mybaccy.3322.org',
'bcl5736120.3322.org',
'ylddos.3322.org',
'xiong97.3322.org',
'xinxin168.3322.org',
'sousou123.3322.org',
'maguss.3322.org',
'aisini1314.3322.org',
'fuck0313.6600.org',
'ksattack.6600.org',
'fangqi.6600.org',
'xin9liao.gnway.net',
'fangqi.7766.org',
'1.ccddos.net',
'rvbwtbeitwjeitv.com',
'rterybrstutnrsbberve.com',
'erwbtkidthetcwerc.com',
'pornoliks.com',
'promoliks.com',
'stromoliks.com',
'fkjdeljfeew32233.com',
'promoliks.combing.com',
'proxim.ircgalaxy.pl'
]

# Get the CNAMEs
domains_aliases=list(set(list(pd.read_csv('../../data/alternative_domains_pools.csv')['ALTERNATIVE_DOMAIN'])))
domains_freebuf=[
'freebuf.info',
'alibuf.com',
'honker.info'
]
domains_usa138=[
'usa-138.com',
'4i7i.com'
]
cnames_of_interest=[
'freebuf.info',
'51btc.mobi',
'btcw.us',
'ovh.net',
'usa-138.com',
'alibuf.com',
'kryptex.org',
'shin3366.cc',
'super1024.com',
'somec.cc',
'bs444.co',
'demaxiya.info',
'krbpool.com',
'aimezi.com',
'mine-pool.com',
'wxkuangji.com',
'appel86.org',
'honker.info',
'weoqieqwuishdwuygqw.com',
'1392010.net',
'4i7i.com',
'r0cav.com',
'sfwewtryhrerwewqretr.com',
'simka.pw',
'xuwupiaomiao.info'
]
def querySHA256(sha256):
	

	sys.argv += ['get_san',sha256]
	response=vxapi.main()
def ofInterest(domain,domain_list):
	for d in domain_list:
		if d.lower() in domain.lower():
			return True
	return False
def getMinersFromHybridAnalysis(outputFile):
	
	hashList=[]
	init=datetime.now()
	queries=0
	i=0

	# Set the domains of interest to be queried
	domains=[d for d in domains_aliases if ofInterest(d,'cnames_of_interest')]
	while i<len(domains):
		domain=domains[i]
		if domain[-1]=='.':
			domain=domain[:-1]
			

		print ("INFO. Searching domain:%s"%domain)
		
		sys.argv = ['queryManager.py', 'search', 'domain:%s'%domain]
		
		#print (sys.argv)
		response=vxapi.main()
		queries+=1
		if not response: 
			print ("ERROR: no response received for search")
			return
		jResponse=json.loads(response)
		if jResponse['response_code']==0:
			i+=1
			results=jResponse['response']['result']
			print ("INFO: Found %s results"%len(results))
			
			fd=open(outputFile,'a+')
			for r in results:
				hashList.append(r['sha256'])
				if 'type_short' in r:
					filetype=r['type_short']
				else:
					filetype=r['type']
				fd.write('"%s","%s","%s","%s","%s","%s","%s"\n'%(r['sha256'],r['environmentId'],filetype,r['start_time'],r['vxfamily'],r['avdetect'],r['verdict']))
			fd.close()
		elif "Exceeded maximum API requests per minute" in jResponse['response']['error']:
			toSleep=62-(datetime.now()-init).seconds
			print ("Waiting %s seconds"%toSleep)
			time.sleep(toSleep)
			init=datetime.now()
			queries=0
		else:
			print (jResponse['response'])
			break
	return hashList

def getStrings(sha256,environmentId):
	url="https://www.hybrid-analysis.com/file/main/mstrings.zip/%s/%s"%(sha256,environmentId)
	response=requests.get(url)
	try:
		zf = zipfile.ZipFile(BytesIO(response.content))
	except zipfile.BadZipFile as e:
		print ("No strings found for %s"%sha256)
		return "NONE","NONE"
	pcapData=""
	data=""
	for f in zf.infolist():
		if "pcap" in f.filename:
			pcapData = zf.read(f.filename).decode('utf-8')
		else:
			data+=zf.read(f.filename).decode('utf-8')
	return pcapData,data
def getPcaps(sha256,environmentId):
	headers = {'api-key': HYBRID_ANALYSIS_API_KEY,
			   'user-agent':'Falcon Sandbox'}
	url='https://www.hybrid-analysis.com/api/v2/report/%s:%s/file/pcap'%(sha256,environmentId)
	outfile=ROOT_DIR+"data/HybridAnalysis/network/%s.pcap"%sha256
	if not os.path.exists(outfile):
		print ("%s [%s] Getting pcap file "%(datetime.now().strftime('%Y-%m-%d_%H:%M:%S'),sha256))
		first_bytes = None
		
		response=requests.get(url,verify=False,headers=headers,stream=True)
		if response.status_code==200:
			gzip_file = gzip.GzipFile(fileobj=response.raw)

			handle= open(outfile, 'wb')
			handle.write(gzip_file.read())

			# for block in response.iter_content(4096):
			# 	handle.write(block)
			# 	if not first_bytes:
			# 		first_bytes = str(block)[:4]
		
			handle.close()


			# valid_pcap_magics = [ '\xd4\xc3\xb2\xa1', '\xa1\xb2\xc3\xd4', '\x4d\x3c\xb2\xa1', '\xa1\xb2\x3c\x4d' ]
			# if first_bytes in valid_pcap_magics:
			# 	print ("[%s] PCAP downloaded"%sha256)
			# 	return response
			# elif first_bytes.startswith('{"'):
			# 	print ("[%s] NOT found" %sha256)
			# 	return response
			# else:
			# 	print ("[%s] Unknown file"%sha256)
			# 	return response        
			return 1
		else:
			print ("ERROR: Received response %s (%s)"%(response.status_code,response.text.replace('\n',' ')))
			return -1
	else:
		print ("%s [%s] Pcap file already present "%(datetime.now().strftime('%Y-%m-%d_%H:%M:%S'),sha256))
		return 0

	# Downloading reports require elevated privileges...
	# url='https://www.hybrid-analysis.com/api/v2/report/%s:%s/file/json'%(sha256,environmentId)
	# outfile=ROOT_DIR+"data/HybridAnalysis/report/%s.report"%sha256
	# if not os.path.exists(outfile):
	# 	print ("Getting report file of %s"%sha256)
	# 	response=requests.get(url,verify=False,headers=headers)
	# 	if response.status_code==200:
	# 		shutil.copyfileobj(response.raw, outfile)
	# 	else:
	# 		print ("ERROR: Received response %s (%s)"%(response.status_code,response.text.replace('\n',' ')))
	# 		return
	# 	jResponse=json.loads(response)

	# 	f = open(outfile, 'w+')
	# 	pickle.dump(jResponse, f)
	# 	f.close()

def downloadPcaps(hashFile):	
	todo=500
	waitTime=12
	lines=open(hashFile).readlines()
	done=0
	init=datetime.now()
	for l in lines:
		sha256=l.split(",")[0].replace('"','')
		environmentId=l.split(",")[1].replace('"','')
		init=datetime.now()
		response=getPcaps(sha256,environmentId)
		end=datetime.now()
		seconds=(end-init).seconds
		done+=1
		if response!=0:
			time.sleep(waitTime-seconds)
		if done>=todo:
			break
def checkHashes(hashFile):
	outputDir=ROOT_DIR+"data/HybridAnalysis/strings/"
	lines=open(hashFile).readlines()
	done=0
	data={}
	for l in lines:
		sha256=l.split(",")[0]
		environmentId=l.split(",")[0]
		if not sha256 in data:
			data[sha256]=environmentId
	found=0

	for sha256 in data:
		if os.path.exists(outputDir+sha256+'.pcapstrings') or os.path.exists(outputDir+sha256+".strings"):
			print (sha256+" EXISTS")
			found+=1
		else:
			print (sha256+" DOESN'T EXIST")
	print ("Total found:%s (out of %s)"%(found,len(data)))
def downloadStrings(hashFile):
	outputDir=ROOT_DIR+"data/HybridAnalysis/strings/"
	outputDirCampaigns=ROOT_DIR+"data/HybridAnalysis/stringsSmominru/"
	todo=200
	waitTime=0.5
	lines=open(hashFile).readlines()
	done=0
	data={}
	for l in lines:
		sha256=l.split(",")[0].replace('"','')
		environmentId=l.split(",")[1].replace('"','')
		if not sha256 in data:
			data[sha256]=environmentId
	for sha256,environmentId in data.items():
		filename="%s%s.strings"%(outputDir,sha256)
		if not os.path.exists(filename):
			filename="%s%s.strings"%(outputDirCampaigns,sha256)
			if not os.path.exists(filename) or os.stat(filename).st_size==0:
				print ("Getting strings of %s"%sha256)
				pcapData,data=getStrings(sha256,environmentId)
				if data=="NONE":
					filename="%s%s.strings"%(outputDirCampaigns,sha256)
					fd=open(filename,'w')
					fd.write("")
					fd.close()
					continue
				if len(pcapData)>0:
					filename="%s%s.pcapstrings"%(outputDirCampaigns,sha256)
					fd=open(filename,'w')
					fd.write(pcapData)
					fd.close()
				else:
					print ("No pcap strings found for %s"%sha256)
				filename="%s%s.strings"%(outputDirCampaigns,sha256)
				fd=open(filename,'w')
				fd.write(data)
				fd.close()
				done+=1
				time.sleep(waitTime)
			else:
				print ("Strings of %s already present"%sha256)
		else:
			print ("Copying file strings of %s"%sha256)
			copyfile(filename,"%s%s.strings"%(outputDirCampaigns,sha256))
			if os.path.exists("%s%s.pcapstrings"%(outputDir,sha256)):
				copyfile("%s%s.pcapstrings"%(outputDir,sha256),"%s%s.pcapstrings"%(outputDirCampaigns,sha256))
		if done>=todo:
			break
def knownPool(line):
	for p in knownPools:
		if p in line:
			return p
	return None



def processSHA256(sha256):
	response=querySHA256(sha256)
	if not response: 
		return
	jResponse=json.loads(response)
	code=jResponse['Status']['Code']

if __name__ == "__main__" :
	# Query for hashes based on contacted domains
	getMinersFromHybridAnalysis('../../data/HybridAnalysis/hashList.csv')

	# Get network information and strings
	downloadPcaps(ROOT_DIR+'data/HybridAnalysis/hashList.csv')
	downloadStrings('../../data/HybridAnalysis/hashList.csv')
	

